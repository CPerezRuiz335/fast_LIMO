# CAT15 config

topics:
  input:
    lidar: /ouster/points
    imu: /ouster/imu

frames: # output frames (the transform between frames will be broadcasted)
  world: global
  body: base_link

num_threads: 4 # OpenMP threads (will be equal to $(nproc) if it is set higher)

sensor_type: 0  # LiDAR type (0: OUSTER \ 1: VELODYNE \ 2: HESAI \ 3: LIVOX)

debug: true     # fill useful intermediate pcl (deskewed, final_raw...) for visualizing purposes
verbose: true   # print debug/performance board
TAI_offset: 0.  # offset between imu and lidar frame timestamp, this will be addes to lidar msg stamp
ransac: true   # wether to apply ransac just for visualization

estimate_extrinsics: false   # continuous estimation of LiDAR-IMU extrinsics 
time_offset: true           # whether to take into account a possible sync offset between IMU and LiDAR (set to true if they are not properly in sync)
end_of_sweep: false          # whether the sweep reference time is w.r.t. the start or the end of the scan (only applies to VELODYNE/OUSTER)

calibration:  # automatic IMU calibration (if all set to false, no calibration will be done)
  gravity_align: true     # estimate gravity vector
  accel: true             # estimate lin. accel. bias
  gyro: true              # estimate ang. vel. bias
  time: 1.               # time to estimate (during this time, the robot must be at stand still)

extrinsics: # w.r.t baselink [SI]
  imu:
    t: [ 0.0, 0.0, 0.98 ]
    R: [0., 0., 0.] 

  lidar:
    t: [0.006253, -0.011775, 0.007645]
    R: [0.333483, -0.8666532, -0.0038787]
    # R: [1.0000263, 0.4999751, -0.0043634]
    # t: [0.006253, -0.011775, 0.007645]


intrinsics:
  accel:
    bias: [ 0.001, 0.001, 0.001 ]  # [m/s^2]
    sm:   [ 1.,  0.,  0.,
            0.,  1.,  0.,
            0.,  0.,  1. ]
  gyro:
    bias: [ 0.001, 0.001, 0.001 ]  # [rad/s]

output: # output pointcloud filtering
  cropBox:
    active: true
    down:
      min: [ -5.7, -1., -3.0 ]
      max: [ 2.0, 1., 3.0 ]
    up:
      min: [ -1.7, -2, -10.0 ]
      max: [ 7.0, 2, -0.10 ]
  radial:
    active: true 
    value: 1.


filters:
  cropBox: # prism crop
    active: false
    box:
      min: [ -0.5, -0.5, -3.0 ]  # [m]
      max: [ 2.0, .5, 3.0 ]     # [m]

  voxelGrid:
    active: true
    leafSize: [ .5, .5, .5 ]

  minDistance: # sphere crop
    active: true
    value: 3.5  # [m]

  FoV: # crop field of view
    active: false
    value: 180  # [deg]
  
  rateSampling: # quick downsample
    active: false
    value: 2

iKFoM:  # Iterative Kalman Filter on Manifolds lib
  MAX_NUM_ITERS: 20                # max num+1 of iterations of the KF (limits comp. load)
  MAX_NUM_MATCHES: 5000           # max num of matches to account for when computing Jacobians (limits comp. load)
  MAX_NUM_PC2MATCH: 1.e+4         # max num of points to consider when matching with map (limits comp. load)
  LIMITS: 0.0001                     

  Mapping:
    NUM_MATCH_POINTS: 5           # num of points that constitute a match
    MAX_DIST_PLANE: 2.0           # [m] max distance between points of every match
    PLANES_THRESHOLD: 5.0e-2      # [m] threshold to consider if match points are part of a plane 
    LocalMapping: false            # whether to keep a fixed size map (moving with the robot) or a limitless map (when active, it limits the memory in use)
    
  iKDTree: # Incremental KD Tree lib
    balance: 0.0      # tree balancing param
    delete: 0.3       # tree deletion param
    voxel: 0.2        # downsampling value
    bb_size: 300.0    # [m] Local Map's bounding box dimension
    bb_range: 200.0   # [m] Local Map's bounding box moving range (if the robot is closer than bb_range to any local map edge, the BB will move)

  covariance:
    gyro: 6.01e-4
    accel: 1.53e-2
    bias_gyro: 1.54e-5
    bias_accel: 3.38e-4

iOctree:
  order: false
  min_extent: .2
  bucket_size: 2
  downsample: true
